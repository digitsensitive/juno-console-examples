/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/boilerplate/boilerplate.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../juno/lib/core/game.ts":
/*!********************************!*\
  !*** ../juno/lib/core/game.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Juno Core: Game Class\n *\n * This is the core game class of Juno.\n * It initialize the canvas, the renderer and the game loop.\n *\n * For the canvas we create the canvas element in this class and append it\n * with appendChild on the div element of the index.html.\n * An alternative would be to use\n * <HTMLCanvasElement>document.getElementById(config.name) and in the index.html\n * put <canvas>. The problem with that approach is, that I could not append\n * other canvas to the main canvas.\n *\n * @license      {@link https://github.com/digitsensitive/juno-console/blob/master/license.txt|MIT License}\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Game = void 0;\nconst graphics_1 = __webpack_require__(/*! ./graphics/graphics */ \"../juno/lib/core/graphics/graphics.ts\");\nconst loop_1 = __webpack_require__(/*! ./loop */ \"../juno/lib/core/loop.ts\");\nconst input_1 = __webpack_require__(/*! ./input/input */ \"../juno/lib/core/input/input.ts\");\nconst canvas_renderer_1 = __webpack_require__(/*! ./renderer/canvas/canvas-renderer */ \"../juno/lib/core/renderer/canvas/canvas-renderer.ts\");\nclass Game {\n    constructor(config) {\n        // init renderer\n        this.renderer = new canvas_renderer_1.CanvasRenderer({\n            name: config.name,\n            width: config.width,\n            height: config.height,\n            scale: config.scale || 1,\n            antialias: config.antialias || false,\n            fullscreen: config.fullscreen,\n        });\n        /* init css properties\n        if (config.css === undefined) {\n          config.css = {};\n        }\n    \n        if (config.css.borderWidth === undefined) {\n          config.css.borderWidth = \"2rem\";\n        }\n        if (config.css.borderStyle === undefined) {\n          config.css.borderStyle = \"solid\";\n        }\n        if (config.css.borderColor === undefined) {\n          config.css.borderColor = \"#1a1c2c\";\n        }\n        if (config.css.borderRadius === undefined) {\n          config.css.borderRadius = \"20px\";\n        }\n    \n        document\n          .getElementById(config.name)\n          .style.setProperty(\"--border-width\", config.css.borderWidth);\n        document\n          .getElementById(config.name)\n          .style.setProperty(\"--border-style\", config.css.borderStyle);\n        document\n          .getElementById(config.name)\n          .style.setProperty(\"--border-color\", config.css.borderColor);\n        document\n          .getElementById(config.name)\n          .style.setProperty(\"--border-radius\", config.css.borderRadius);*/\n        // set input\n        this.inputs = new input_1.Input({\n            renderer: this.renderer,\n            options: {\n                inputs: {\n                    keyboard: config.input.keyboard !== undefined ? config.input.keyboard : true,\n                    mouse: config.input.mouse !== undefined ? config.input.mouse : false,\n                },\n            },\n        });\n        // init API instance\n        this.graphics = new graphics_1.Graphics(this.renderer, this.inputs);\n        this.graphics.ipal(\"1a1c2c572956b14156ee7b58ffd079a0f07238b86e276e7b29366f405bd04fa4f786ecf8f4f4f493b6c1557185324056\");\n    }\n    startLoop() {\n        // init instance of game loop\n        this.gameLoop = new loop_1.GameLoop();\n        this.gameLoop.on(\"init\", function () {\n            this.init();\n        }, this);\n        this.gameLoop.on(\"update\", function (dt) {\n            this.update(dt);\n        }, this);\n        this.gameLoop.on(\"render\", function (dt) {\n            this.render(dt);\n        }, this);\n        this.gameLoop.start();\n    }\n}\nexports.Game = Game;\n\n\n//# sourceURL=webpack:///../juno/lib/core/game.ts?");

/***/ }),

/***/ "../juno/lib/core/graphics/graphics.ts":
/*!*********************************************!*\
  !*** ../juno/lib/core/graphics/graphics.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Juno Core: Graphics\n *\n * Here you will find the core functions of Juno.\n *\n * @license      {@link https://github.com/digitsensitive/juno-console/blob/master/license.txt|MIT License}\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Graphics = void 0;\nconst key_enum_1 = __webpack_require__(/*! ../input/enums/key.enum */ \"../juno/lib/core/input/enums/key.enum.ts\");\nclass Graphics {\n    constructor(cr, inputs) {\n        this.cr = cr;\n        this.inputs = inputs;\n        this.images = new Map();\n        this.mapData = [];\n        this.mapAdjustments = { x: 0, y: 0 };\n        this.passedTicks = 0;\n    }\n    translate(x, y) {\n        // save entire state of the canvas by pushing the current state onto a stack\n        this.cr.getRenderer().save();\n        // do the transformation\n        this.cr.getRenderer().translate(x, y);\n    }\n    /********************************************************************\n     * Init color palette with chain hex color string\n     * Total 16 colors: 6 * 16 = 96 (string length)\n     * Examples:\n     * Juno:\n     * 1a1c2c572956b14156ee7b58ffd079a0f07238b86e276e7b29366f405bd04fa4f786ecf8f4f4f493b6c1557185324056\n     * TIC-80 (DB16):\n     * 140C1C44243430346D4E4A4F854C30346524D04648757161597DCED27D2C8595A16DAA2CD2AA996DC2CADAD45EDEEED6\n     * COMMODORE VIC-20 PALETTE\n     * 000000ffffffa8734ae9b287772d26b6686285d4dcc5ffffa85fb4e99df5559e4a92df8742348b7e70cabdcc71ffffb0\n     * STILL LIFE PALETTE\n     * 3f28117a2222d13b27e07f8a5d853a68c127b3e868122615513155286fb89b8bffa8e4d4cc8218c7b581000000ffffff\n     * JAPANESE MACHINE PALETTE\n     * 00000019102846af45a1d685453e787664fe8331299ec2e8dc534be18d79d6b97be9d8a1216c4bd365c8afaab9f5f4eb\n     * CGARNE PALETTE\n     * 0000005e606e2234d10c7e455c2e78b5b5b5FFFFFFffd93f7be2f98a36224c81fb44aacceb8a60aa5c3d6cd947e23d69\n     * PSYGNOSIA PALETTE\n     * 0000001b1e29362747443f4152524c64647c73615077785b9ea4a7cbe8f7e08b79a2324e003308084a3c546a00516cbf\n     * COLOR GRAPHICS ADAPTER PALETTE\n     * 000000555555AAAAAAFFFFFF0000AA5555FF00AA0055FF5500AAAA55FFFFAA0000FF5555AA00AAFF55FFAA5500FFFF55\n     * EROGE COPPER PALETTE\n     * 0d080d4f2b24825b31c59154f0bd77fbdf9bfff9e4bebbb27bb24e74adbb4180a032535f2a23497d3840c16c5be89973\n     * EASTER ISLAND PALETTE\n     * f6f6bfe6d1d1868691794765f5e17aedc38dcc8d86ca657e39d4b98dbcd28184ab6860869dc0857ea788567864051625\n     * PICO-8 PALETTE\n     * 0000001D2B537E255383769CAB5236008751FF004D5F574FFF77A8FFA300C2C3C700E436FFCCAA29ADFFFFEC27FFF1E8\n     * GRAYSCALE\n     * 000000111111222222333333444444555555666666777777888888999999aaaaaabbbbbbccccccddddddeeeeeeffffff\n     *\n     * @param palette [index of the color in the palette]\n     ********************************************************************/\n    ipal(palette) {\n        this.palette = [];\n        let fromPositionInString = 0;\n        while (fromPositionInString < 96) {\n            this.palette.push(\"#\" + palette.substr(fromPositionInString, 6));\n            fromPositionInString += 6;\n        }\n    }\n    /********************************************************************\n     * Clear the screen with a specified color.\n     * @param color [index of the color in the palette]\n     /********************************************************************/\n    cls(c) {\n        const context = this.cr.getRenderer();\n        // restore if transformations have been applied\n        context.restore();\n        if (c === undefined) {\n            // clear screen\n            context.clearRect(0, 0, this.cr.getCanvas().width, this.cr.getCanvas().height);\n        }\n        else {\n            // evaluate runtime errors\n            this.isColorInRange(c);\n            // draw the selected color on screen\n            context.fillStyle = this.palette[c];\n            context.fillRect(0, 0, this.cr.getCanvas().width, this.cr.getCanvas().height);\n        }\n        // update ticks\n        this.passedTicks += 1;\n    }\n    /********************************************************************\n     * Draw one pixel at a specific 2D location (x and y).\n     * @param x0    [x coordinate of the pixel]\n     * @param y0    [y coordinate of the pixel]\n     * @param color [index of the color in the palette]\n     ********************************************************************/\n    pix(x0, y0, c) {\n        // evaluate runtime errors\n        this.isColorInRange(c);\n        this.cr.getRenderer().fillStyle = this.palette[c];\n        this.cr\n            .getRenderer()\n            .fillRect(x0 * this.cr.getScaleFactor(), y0 * this.cr.getScaleFactor(), this.cr.getScaleFactor(), this.cr.getScaleFactor());\n    }\n    /**\n     * Draw a circle outline, using the Bresenham's circle algorithm.\n     * @param xc\n     * @param yc\n     * @param r\n     * @param c\n     */\n    circb(xc, yc, r, c) {\n        // evaluate if color in range\n        this.isColorInRange(c);\n        let x = 0;\n        let y = r;\n        let decisionParameter = 3 - 2 * r;\n        this.circbPixGroup(xc, yc, x, y, c);\n        while (x <= y) {\n            x++;\n            if (decisionParameter < 0) {\n                decisionParameter = decisionParameter + 4 * x + 6;\n            }\n            else {\n                y--;\n                decisionParameter = decisionParameter + 4 * (x - y) + 10;\n            }\n            this.circbPixGroup(xc, yc, x, y, c);\n        }\n    }\n    /**\n     * Plot eight pixels by using concepts of eight-way symmetry.\n     * @param xc [x coordinate of the center of the circle]\n     * @param yc [y coordinate of the center of the circle]\n     * @param x  [x coordinate of pixel]\n     * @param y  [y coordinate of pixel]\n     * @param c  [pixel color]\n     */\n    circbPixGroup(xc, yc, x, y, c) {\n        this.pix(xc + x, yc + y, c);\n        this.pix(xc + x, yc - y, c);\n        this.pix(xc - x, yc + y, c);\n        this.pix(xc - x, yc - y, c);\n        this.pix(xc + y, yc + x, c);\n        this.pix(xc + y, yc - x, c);\n        this.pix(xc - y, yc + x, c);\n        this.pix(xc - y, yc - x, c);\n    }\n    /**\n     * Draw a filled circle, using the Bresenham's circle algorithm.\n     * @param xc [x coordinate of the center of the circle]\n     * @param yc [y coordinate of the center of the circle]\n     * @param r  [radius of the circle]\n     * @param c  [index of the color in the palette]\n     */\n    circ(xc, yc, r, c) {\n        // evaluate if color in range\n        this.isColorInRange(c);\n        let x = 0;\n        let y = r;\n        let decisionParameter = 3 - 2 * r;\n        this.circPixGroup(xc, yc, x, y, c);\n        while (x <= y) {\n            x++;\n            if (decisionParameter < 0) {\n                decisionParameter = decisionParameter + 4 * x + 6;\n            }\n            else {\n                y--;\n                decisionParameter = decisionParameter + 4 * (x - y) + 10;\n            }\n            this.circPixGroup(xc, yc, x, y, c);\n        }\n    }\n    /**\n     * Group of pixel lines (100%)\n     * Draws a group of lines, used for drawing a filled circle.\n     * @param xc [first x coordinate]\n     * @param yc [first y coordinate]\n     * @param x  [second x coordinate]\n     * @param y  [second y coordinate]\n     * @param c  [index of the color in the palette]\n     */\n    circPixGroup(xc, yc, x, y, c) {\n        this.line(xc + x, yc + y, xc - x, yc + y, c);\n        this.line(xc + x, yc - y, xc - x, yc - y, c);\n        this.line(xc + y, yc + x, xc - y, yc + x, c);\n        this.line(xc + y, yc - x, xc - y, yc - x, c);\n    }\n    /********************************************************************\n     * Create a line with the Bresenham's line algorithm.\n     * @param x0 [the starting x position]\n     * @param y0 [the starting y position]\n     * @param x1 [the ending x position]\n     * @param y1 [the ending y position]\n     * @param c  [index of the color in the palette]\n     ********************************************************************/\n    line(x0, y0, x1, y1, c) {\n        // evaluate runtime errors\n        this.isColorInRange(c);\n        x0 = Math.ceil(x0);\n        y0 = Math.ceil(y0);\n        x1 = Math.ceil(x1);\n        y1 = Math.ceil(y1);\n        let dx = Math.abs(x1 - x0);\n        let dy = Math.abs(y1 - y0);\n        let sx = x0 < x1 ? 1 : -1;\n        let sy = y0 < y1 ? 1 : -1;\n        let err = dx - dy;\n        for (let x = 0; x <= dx; x++) {\n            for (let y = 0; y <= dy; y++) {\n                this.pix(x0, y0, c);\n                if (x0 == x1 && y0 == y1) {\n                    break;\n                }\n                let e2 = 2 * err;\n                if (e2 >= -dy) {\n                    err -= dy;\n                    x0 += sx;\n                }\n                if (e2 < dx) {\n                    err += dx;\n                    y0 += sy;\n                }\n            }\n        }\n    }\n    /********************************************************************\n     * Draw a filled rectangle.\n     * @param x0    [the x position of the rectangle]\n     * @param y0    [the y position of the rectangle]\n     * @param w     [the width of the rectangle]\n     * @param h     [the height of the rectangle]\n     * @param c [index of the color in the palette]\n     ********************************************************************/\n    rect(x0, y0, w, h, c) {\n        // evaluate runtime errors\n        if (w <= 0) {\n            throw new RangeError(\"The width of a rectangle must be > 0. \");\n        }\n        else if (h <= 0) {\n            throw new RangeError(\"The height of a rectangle must be > 0. \");\n        }\n        this.isColorInRange(c);\n        this.cr.getRenderer().fillStyle = this.palette[c];\n        this.cr\n            .getRenderer()\n            .fillRect(x0 * this.cr.getScaleFactor(), y0 * this.cr.getScaleFactor(), w * this.cr.getScaleFactor(), h * this.cr.getScaleFactor());\n    }\n    /********************************************************************\n     * Draw a rectangle outline.\n     * @param x0    [the x position of the rectangle]\n     * @param y0    [the y position of the rectangle]\n     * @param w     [the width of the rectangle]\n     * @param h     [the height of the rectangle]\n     * @param c     [index of the color in the palette]\n     ********************************************************************/\n    rectb(x0, y0, w, h, c) {\n        // evaluate runtime errors\n        if (w <= 0) {\n            throw new RangeError(\"The width of a rectangle must be > 0. \");\n        }\n        else if (h <= 0) {\n            throw new RangeError(\"The height of a rectangle must be > 0. \");\n        }\n        this.isColorInRange(c);\n        for (let x = 0; x < w; x++) {\n            for (let y = 0; y < h; y++) {\n                if (x === 0 || y === 0 || x === w - 1 || y === h - 1) {\n                    this.pix(x0 + x, y0 + y, c);\n                }\n            }\n        }\n    }\n    /********************************************************************\n     * Print text.\n     * @param s  [string to print]\n     * @param x  [x position of the text]\n     * @param y  [y position of the text]\n     * @param c  [index of the color in the palette]\n     * @param sc [scale factor of the text]\n     ********************************************************************/\n    print(s, x0, y0, c, a, sc) {\n        // evaluate runtime errors\n        if (sc !== undefined && sc < 1) {\n            throw new RangeError(\"The font size cannot be smaller than 1. \");\n        }\n        else if (s.length === 0) {\n            throw new RangeError(\"The font length must be longer than 0. \");\n        }\n        this.isColorInRange(c);\n        let size = sc * 3 * this.cr.getScaleFactor() || 3 * this.cr.getScaleFactor();\n        this.cr.getRenderer().font = size + \"px Juno\";\n        this.cr.getRenderer().fillStyle =\n            this.palette[c] + this.calculateAlphaHexCode(a || 1);\n        this.cr\n            .getRenderer()\n            .fillText(s, x0 * this.cr.getScaleFactor(), y0 * this.cr.getScaleFactor() + size);\n    }\n    /********************************************************************\n     * Trace a string or a number => Alternative to console.log().\n     * @param s [the string or number to trace]\n     ********************************************************************/\n    trace(s) {\n        if (typeof s === \"number\") {\n            s = s.toString();\n        }\n        this.print(s, 0, 0, 12);\n    }\n    /********************************************************************\n     * Load your game files (f.e. spritesheet, tiles, json map).\n     * Currently supported file formats: jpg, jpeg, png and json.\n     * @param name    [name of the file]\n     * @param path    [path of the file]\n     * @param size    [size of the sprites/tiles]\n     ********************************************************************/\n    load(name, path, size) {\n        let extension = path.substr(path.lastIndexOf(\".\") + 1);\n        if (extension === \"png\" ||\n            extension === \"PNG\" ||\n            extension === \"jpg\" ||\n            extension === \"JPG\" ||\n            extension === \"jpeg\" ||\n            extension === \"JPEG\") {\n            this.spriteSize = size;\n            let image = new Image();\n            image.src = path;\n            this.images.set(name, image);\n        }\n        if (extension === \"json\" || extension === \"JSON\") {\n            this.tileSize = size;\n            var request = new XMLHttpRequest();\n            request.open(\"GET\", path, false);\n            request.send(null);\n            this.parseJSONDataIntoObject(JSON.parse(request.responseText));\n        }\n    }\n    /********************************************************************\n     * Parse JSON data into JSON object.\n     * Currently the following data is parsed:\n     * Map width, Map height, Tile width, Tile height, Layers and Tilesets.\n     * Only CSV as Tile level format is currently supported.\n     * @param data [the data to parse]\n     ********************************************************************/\n    parseJSONDataIntoObject(data) {\n        let tiledMapData = {};\n        // get basic map data\n        tiledMapData.mapWidth = data.width;\n        tiledMapData.mapHeight = data.height;\n        tiledMapData.tileWidth = data.tilewidth;\n        tiledMapData.tileHeight = data.tileheight;\n        // get layer data\n        let layers = [];\n        let layersLength = data.layers.length;\n        for (let i = 0; i < layersLength; i++) {\n            let layer = {};\n            layer.name = data.layers[i].name;\n            layer.type = data.layers[i].type;\n            layer.height = data.layers[i].height;\n            layer.width = data.layers[i].width;\n            let layerData = [];\n            let j = 0;\n            for (let y = 0; y < layer.height; y++) {\n                layerData[y] = [];\n                for (let x = 0; x < layer.width; x++) {\n                    /* correction with - 1 is needed, because indexation with Tiles\n                     starts with 1 and not with 0 */\n                    layerData[y][x] = data.layers[i].data[j] - 1;\n                    j++;\n                }\n            }\n            layer.data = layerData;\n            if (data.layers[i].objects !== undefined) {\n                let obj = [];\n                let objLength = data.layers[i].objects.length;\n                for (let j = 0; j < objLength; j++) {\n                    let object = {};\n                    object.name = data.layers[i].objects[j].name;\n                    object.x = data.layers[i].objects[j].x;\n                    object.y = data.layers[i].objects[j].y;\n                    object.height = data.layers[i].objects[j].height;\n                    object.width = data.layers[i].objects[j].width;\n                    obj.push(object);\n                }\n                layer.objects = obj;\n            }\n            layer.visible = data.layers[i].visible;\n            layer.opacity = data.layers[i].opacity;\n            layer.x = data.layers[i].x;\n            layer.y = data.layers[i].y;\n            layers.push(layer);\n        }\n        tiledMapData.layers = [];\n        tiledMapData.layers = layers;\n        // get tilesets\n        let tilesets = [];\n        let tilesetsLength = data.tilesets.length;\n        for (let i = 0; i < tilesetsLength; i++) {\n            let tileset = {};\n            let tileProp = new Map();\n            tileset.name = data.tilesets[i].name;\n            tileset.tileCount = data.tilesets[i].tilecount;\n            for (let key in data.tilesets[i].tileproperties) {\n                if (data.tilesets[i].tileproperties.hasOwnProperty(key)) {\n                    tileProp.set(key, data.tilesets[i].tileproperties[key]);\n                }\n            }\n            tileset.tileProperties = tileProp;\n            tilesets.push(tileset);\n        }\n        tiledMapData.tilesets = [];\n        tiledMapData.tilesets = tilesets;\n        this.mapData.push(tiledMapData);\n    }\n    /********************************************************************\n     * Draw map on the screen.\n     * @param x  [starting tile on x coordinate]\n     * @param y  [starting tile on y coordinate]\n     * @param w  [number of tiles to draw to the width]\n     * @param h  [number of tiles to draw to the height]\n     * @param sx [the x coordinate to draw the map to]\n     * @param sy [the y coordinate to draw the map to]\n     ********************************************************************/\n    map(x, y, w, h, sx, sy) {\n        let mapArray = this.mapData[0].layers[0].data;\n        let tileSize = this.mapData[0].tileHeight;\n        let numberVerticalTiles = this.mapData[0].layers[0].height;\n        let numberHorizontalTiles = this.mapData[0].layers[0].width;\n        let width = w || numberHorizontalTiles;\n        let height = h || numberVerticalTiles;\n        this.mapAdjustments.x = x || 0;\n        this.mapAdjustments.y = y || 0;\n        let x1 = sx || 0;\n        let y1 = sy || 0;\n        // evaluate runtime errors\n        if (this.mapAdjustments.x < 0 || this.mapAdjustments.y < 0) {\n            throw new RangeError(\"map(): Starting tile cannot be negative!. \");\n        }\n        for (let y0 = this.mapAdjustments.y; y0 < height; y0++) {\n            for (let x0 = this.mapAdjustments.x; x0 < width; x0++) {\n                this.spr(mapArray[y0][x0], x1 + (x0 - this.mapAdjustments.x) * tileSize, y1 + (y0 - this.mapAdjustments.y) * tileSize);\n            }\n        }\n    }\n    /********************************************************************\n     * Get the map tile index at a specific 2D coordinate.\n     * @param  x [the x coordinate of the tile]\n     * @param  y [the y coordinate of the tile]\n     * @return   [the map tile index]\n     ********************************************************************/\n    mget(x, y) {\n        // get the actual coordinates. Depends on the tile size.\n        // Use of floor to round downward to its nearest integer\n        let x0 = Math.floor(x / this.tileSize) + this.mapAdjustments.x;\n        let y0 = Math.floor(y / this.tileSize) + this.mapAdjustments.y;\n        // evaluate runtime errors\n        // math.floor rounds down f.e. x = 0.99 to 0 -> means < 0 not allowed\n        // width & height must than be corrected with (-1) since we start from 0\n        if (x0 < 0 ||\n            x0 > this.mapData[0].layers[0].width - 1 ||\n            y0 < 0 ||\n            y0 > this.mapData[0].layers[0].height - 1) {\n            throw new RangeError(\"mget(): Tile coordinate: \" + x + \" / \" + y + \" is out of the range. \");\n        }\n        return this.mapData[0].layers[0].data[y0][x0];\n    }\n    /********************************************************************\n     * Set the map tile index at a specific 2D coordinate.\n     * @param id [the map tile index to set]\n     * @param x [the x position of the tile to set]\n     * @param y [the y position of the tile to set]\n     ********************************************************************/\n    mset(id, x, y) {\n        if (id < 0 || id > this.mapData[0].tilesets[0].tileCount) {\n            throw new RangeError(\"mset(): Tile id: \" + id + \" is out of the range / does not exist. \");\n        }\n        else if (x < 0 ||\n            x >= this.mapData[0].layers[0].width ||\n            y < 0 ||\n            y >= this.mapData[0].layers[0].height) {\n            throw new RangeError(\"mset(): Tile coordinate: \" + x + \" / \" + y + \" is out of the range. \");\n        }\n        this.mapData[0].layers[0].data[y][x] = id;\n    }\n    mobj() {\n        let obj = this.mapData[0].layers[1].objects;\n        let objLength = this.mapData[0].layers[1].objects.length;\n        for (let i = 0; i < objLength; i++) {\n            this.spr(26, obj[i].x, obj[i].y);\n        }\n    }\n    /********************************************************************\n     * Create a sprite from spritesheet.\n     * @param s  [the choosen sprite]\n     * @param x0 [x position of the sprite]\n     * @param y0 [y position of the sprite]\n     ********************************************************************/\n    spr(s, x0, y0) {\n        //this.cr.getRenderer().mozImageSmoothingEnabled = false;\n        //this.cr.getRenderer().webkitImageSmoothingEnabled = false;\n        this.cr.getRenderer().imageSmoothingEnabled = false;\n        let amountFieldsHorizontal = this.images.values().next().value.width / this.spriteSize;\n        let yPos = Math.floor(s / amountFieldsHorizontal);\n        let xPos = s - amountFieldsHorizontal * yPos;\n        this.cr\n            .getRenderer()\n            .drawImage(this.images.values().next().value, xPos * this.spriteSize, yPos * this.spriteSize, 8, 8, x0 * this.cr.getScaleFactor(), y0 * this.cr.getScaleFactor(), this.spriteSize * this.cr.getScaleFactor(), this.spriteSize * this.cr.getScaleFactor());\n    }\n    /********************************************************************\n     * Get pixel color index from 2D position.\n     * @param  x0 [x position of the pixel]\n     * @param  y0 [y position of the pixel]\n     * @return    [the color index of the pixel]\n     ********************************************************************/\n    pget(x0, y0) {\n        let p = this.cr\n            .getRenderer()\n            .getImageData(Math.round(x0) * this.cr.getScaleFactor(), Math.round(y0) * this.cr.getScaleFactor(), this.cr.getScaleFactor(), this.cr.getScaleFactor()).data;\n        let hex = this.rgbToHex(p[0], p[1], p[2]);\n        let l = this.palette.length;\n        for (let p = 0; p < l; p++) {\n            if (this.palette[p] === hex) {\n                return p;\n            }\n        }\n    }\n    /********************************************************************\n     * Converts each primary color to corresponding hex value.\n     * @param  c [the color to convert]\n     * @return   [the hex value as a string]\n     ********************************************************************/\n    componentToHex(c) {\n        let hex = c.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }\n    /********************************************************************\n     * Converts rgb to hex.\n     * @param  r [r value]\n     * @param  g [g value]\n     * @param  b [b value]\n     * @return   [the final hex-string]\n     ********************************************************************/\n    rgbToHex(r, g, b) {\n        return (\"#\" +\n            this.componentToHex(r) +\n            this.componentToHex(g) +\n            this.componentToHex(b));\n    }\n    /********************************************************************\n     * Get status of key code passed\n     * Return true if key is pressed\n     * @param  code [key code passed]\n     * @return      [true or false]\n     ********************************************************************/\n    key(code) {\n        switch (code) {\n            case 0: {\n                if (this.inputs.isDown(key_enum_1.KEY.UP)) {\n                    return true;\n                }\n                break;\n            }\n            case 1: {\n                if (this.inputs.isDown(key_enum_1.KEY.DOWN)) {\n                    return true;\n                }\n                break;\n            }\n            case 2: {\n                if (this.inputs.isDown(key_enum_1.KEY.LEFT)) {\n                    return true;\n                }\n                break;\n            }\n            case 3: {\n                if (this.inputs.isDown(key_enum_1.KEY.RIGHT)) {\n                    return true;\n                }\n                break;\n            }\n            case 4: {\n                if (this.inputs.isDown(key_enum_1.KEY.A)) {\n                    return true;\n                }\n                break;\n            }\n            case 5: {\n                if (this.inputs.isDown(key_enum_1.KEY.B)) {\n                    return true;\n                }\n                break;\n            }\n            case 6: {\n                if (this.inputs.isDown(key_enum_1.KEY.X)) {\n                    return true;\n                }\n                break;\n            }\n            case 7: {\n                if (this.inputs.isDown(key_enum_1.KEY.Z)) {\n                    return true;\n                }\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n    /********************************************************************\n     * Get status of key code passed\n     * Return only true if pressed now and not in previous frame\n     * @param  code [Key code passed]\n     * @return      [true or false]\n     ********************************************************************/\n    keyp(code) {\n        switch (code) {\n            case 0: {\n                if (this.inputs.justDown(key_enum_1.KEY.UP)) {\n                    return true;\n                }\n                break;\n            }\n            case 1: {\n                if (this.inputs.justDown(key_enum_1.KEY.DOWN)) {\n                    return true;\n                }\n                break;\n            }\n            case 2: {\n                if (this.inputs.justDown(key_enum_1.KEY.LEFT)) {\n                    return true;\n                }\n                break;\n            }\n            case 3: {\n                if (this.inputs.justDown(key_enum_1.KEY.RIGHT)) {\n                    return true;\n                }\n                break;\n            }\n            case 4: {\n                if (this.inputs.justDown(key_enum_1.KEY.A)) {\n                    return true;\n                }\n                break;\n            }\n            case 5: {\n                if (this.inputs.justDown(key_enum_1.KEY.B)) {\n                    return true;\n                }\n                break;\n            }\n            case 6: {\n                if (this.inputs.justDown(key_enum_1.KEY.X)) {\n                    return true;\n                }\n                break;\n            }\n            case 7: {\n                if (this.inputs.justDown(key_enum_1.KEY.Z)) {\n                    return true;\n                }\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n    sfx() {\n        let ctx = new AudioContext();\n        let lfo = ctx.createOscillator();\n        lfo.frequency.value = 1.0;\n        // Create the high frequency oscillator to be modulated\n        let hfo = ctx.createOscillator();\n        hfo.frequency.value = 440.0;\n        // Create a gain node whose gain determines the amplitude of the modulation signal\n        let modulationGain = ctx.createGain();\n        modulationGain.gain.value = 50;\n        // Configure the graph and start the oscillators\n        lfo.connect(modulationGain);\n        modulationGain.connect(hfo.detune);\n        hfo.connect(ctx.destination);\n        hfo.start(0);\n        lfo.start(0);\n    }\n    /********************************************************************\n     * Return mouse informations.\n     * @return [IMouse Interface: Coordinates and Button pressed]\n     ********************************************************************/\n    mouse() {\n        return this.inputs.getMouse();\n    }\n    /********************************************************************\n     * Get the game width in pixels\n     * @return [game width]\n     ********************************************************************/\n    ggw() {\n        return this.cr.getCanvas().width / this.cr.getScaleFactor();\n    }\n    /********************************************************************\n     * Get the game height in pixels\n     * @return [game height]\n     ********************************************************************/\n    ggh() {\n        return this.cr.getCanvas().height / this.cr.getScaleFactor();\n    }\n    ticks() {\n        return this.passedTicks;\n    }\n    rnd(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    /********************************************************************\n     * Color Range Error (100%)\n     * Check if the selected color is between 0 and 15.\n     * @param c [the color to check]\n     ********************************************************************/\n    isColorInRange(c) {\n        if (c < 0 || c > 15) {\n            throw new RangeError(\"You have selected an incorrect color index (\" +\n                c +\n                \"). The color must be between 0-15\");\n        }\n    }\n    /********************************************************************\n     * SPECIAL API FUNCTIONS\n     ********************************************************************/\n    crc(c, r) {\n        let circleDistanceX = Math.abs(c.x - r.x);\n        let circleDistanceY = Math.abs(c.y - r.y);\n        if (circleDistanceX > r.w / 2 + c.r) {\n            return false;\n        }\n        if (circleDistanceY > r.h / 2 + c.r) {\n            return false;\n        }\n        if (circleDistanceX <= r.w / 2) {\n            return true;\n        }\n        if (circleDistanceY <= r.h / 2) {\n            return true;\n        }\n        let cornerDistance_sq = (circleDistanceX - r.w / 2) * (circleDistanceX - r.w / 2) +\n            (circleDistanceY - r.h / 2) * (circleDistanceY - r.h / 2);\n        return cornerDistance_sq <= c.r * c.r;\n    }\n    rrc(r1, r2) {\n        if (r1.x < r2.x + r2.w &&\n            r1.x + r1.w > r2.x &&\n            r1.y < r2.y + r2.h &&\n            r1.y + r1.h > r2.y) {\n            return true;\n        }\n        return false;\n    }\n    anim(object, startFrame, numberOfFrames, speed) {\n        if (!object.a_ct) {\n            object.a_ct = 0;\n        }\n        if (!object.a_st) {\n            object.a_st = 0;\n        }\n        object.a_ct += 1;\n        if (object.a_ct % (30 / speed) == 0) {\n            object.a_st += 1;\n            if (object.a_st == numberOfFrames)\n                object.a_st = 0;\n        }\n        object.a_fr = startFrame + object.a_st;\n        this.spr(object.a_fr, object.x, object.y);\n    }\n    calculateAlphaHexCode(a) {\n        a = Math.round(a * 100) / 100;\n        var alpha = Math.round(a * 255);\n        var hex = (alpha + 0x10000).toString(16).substr(-2).toUpperCase();\n        return hex;\n    }\n}\nexports.Graphics = Graphics;\n\n\n//# sourceURL=webpack:///../juno/lib/core/graphics/graphics.ts?");

/***/ }),

/***/ "../juno/lib/core/input/enums/key.enum.ts":
/*!************************************************!*\
  !*** ../juno/lib/core/input/enums/key.enum.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Juno: KEY Enum\n * @license      {@link https://github.com/digitsensitive/juno-console/blob/master/license.txt|MIT License}\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KEY = void 0;\nvar KEY;\n(function (KEY) {\n    KEY[KEY[\"UP\"] = 38] = \"UP\";\n    KEY[KEY[\"DOWN\"] = 40] = \"DOWN\";\n    KEY[KEY[\"LEFT\"] = 37] = \"LEFT\";\n    KEY[KEY[\"RIGHT\"] = 39] = \"RIGHT\";\n    KEY[KEY[\"A\"] = 65] = \"A\";\n    KEY[KEY[\"B\"] = 66] = \"B\";\n    KEY[KEY[\"X\"] = 88] = \"X\";\n    KEY[KEY[\"Z\"] = 89] = \"Z\";\n})(KEY = exports.KEY || (exports.KEY = {}));\n\n\n//# sourceURL=webpack:///../juno/lib/core/input/enums/key.enum.ts?");

/***/ }),

/***/ "../juno/lib/core/input/input.ts":
/*!***************************************!*\
  !*** ../juno/lib/core/input/input.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Juno Core: Input Class\n * @license      {@link https://github.com/digitsensitive/juno-console/blob/master/license.txt|MIT License}\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Input = void 0;\nclass Input {\n    constructor(cr) {\n        this.cr = cr;\n        this.mouse = {};\n        this.registerEvents();\n        if (this.cr.options.inputs.keyboard) {\n            this.lastKeyPressed = -1;\n            this.registerKeyboardKeys();\n        }\n    }\n    registerEvents() {\n        if (this.cr.options.inputs.mouse) {\n            this.cr.renderer.getCanvas().addEventListener(\"mousemove\", (e) => {\n                var rect = this.cr.renderer.getCanvas().getBoundingClientRect();\n                this.mouse.x = (e.x - rect.left) / this.cr.renderer.getScaleFactor();\n                this.mouse.y = (e.y - rect.top) / this.cr.renderer.getScaleFactor();\n            });\n            this.cr.renderer.getCanvas().addEventListener(\"mousedown\", (e) => {\n                if (e.button === 0) {\n                    this.currentMouseKey = \"L\";\n                }\n                else if (e.button === 1) {\n                    this.currentMouseKey = \"M\";\n                }\n                else if (e.button === 2) {\n                    this.currentMouseKey = \"R\";\n                }\n            });\n            this.cr.renderer.getCanvas().addEventListener(\"mouseup\", (e) => {\n                this.currentMouseKey = \"\";\n            });\n        }\n        if (this.cr.options.inputs.keyboard) {\n            window.addEventListener(\"keydown\", (e) => {\n                this.keys.set(e.keyCode, true);\n            });\n            window.addEventListener(\"keyup\", (e) => {\n                this.lastKeyPressed = -1;\n                this.keys.set(e.keyCode, false);\n            });\n        }\n    }\n    registerKeyboardKeys() {\n        this.keys = new Map([\n            [38, false],\n            [40, false],\n            [37, false],\n            [39, false],\n            [65, false],\n            [66, false],\n            [88, false],\n            [89, false],\n        ]);\n    }\n    getMouse() {\n        return {\n            x: Math.round(this.mouse.x),\n            y: Math.round(this.mouse.y),\n            button: this.currentMouseKey,\n        };\n    }\n    getMousePosition() {\n        return this.mouse;\n    }\n    getMouseButton() {\n        return this.currentMouseKey;\n    }\n    isDown(code) {\n        if (this.keys.get(code)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    justDown(code) {\n        if (this.keys.get(code)) {\n            if (this.lastKeyPressed === code) {\n                this.lastKeyPressed = code;\n                return false;\n            }\n            else {\n                this.lastKeyPressed = code;\n                return true;\n            }\n        }\n    }\n}\nexports.Input = Input;\n\n\n//# sourceURL=webpack:///../juno/lib/core/input/input.ts?");

/***/ }),

/***/ "../juno/lib/core/loop.ts":
/*!********************************!*\
  !*** ../juno/lib/core/loop.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Juno Core: Game Loop\n *\n * This is the core game loop of the juno html5 game framework.\n * Juno uses a fixed update time step with a variable rendering. This\n * means, that it updates with a fixed time step, but can drop rendering\n * frames to catch up.\n *\n * The Game Loop makes use of EventEmitter to communicate.\n *\n * Regarding Request Animation Frame Juno uses the most basic implementation.\n *\n * Regarding Time Juno uses the most basic implementation of performane.now\n * (see polyfills/performance.now.ts).\n *\n * References:\n * http://gameprogrammingpatterns.com/game-loop.html (Date: 2018-09-09)\n * https://gafferongames.com/post/fix_your_timestep (Date: 2018-09-09)\n * http://www.koonsolo.com/news/dewitters-gameloop (Date: 2018-09-09)\n * https://github.com/sethvincent/gameloop (Date: 2018-09-09)\n *\n * @license      {@link https://github.com/digitsensitive/juno-console/blob/master/license.txt|MIT License}\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GameLoop = void 0;\nconst eventemitter3_1 = __webpack_require__(/*! eventemitter3 */ \"../juno/node_modules/eventemitter3/index.js\");\nconst performance_now_1 = __webpack_require__(/*! ./polyfills/performance.now */ \"../juno/lib/core/polyfills/performance.now.ts\");\nclass GameLoop extends eventemitter3_1.EventEmitter {\n    constructor() {\n        super();\n        this.fps = 60;\n        this.paused = false;\n        this.step = 1 / this.fps;\n    }\n    /**\n     * Start the game loop\n     * @param state [name of the state to start]\n     */\n    start() {\n        this.init();\n        this.paused = false;\n        this.currentTime = performance_now_1.ElapsedTime();\n        this.accumulator = 0;\n        this.frame();\n    }\n    /**\n     * Execution of one frame (= tick).\n     */\n    frame() {\n        if (!this.paused) {\n            let newTime = performance_now_1.ElapsedTime();\n            // it is important that frameTime is in seconds\n            // because this.step is also in seconds\n            let frameTime = (newTime - this.currentTime) / 1000;\n            this.currentTime = newTime;\n            this.accumulator += frameTime;\n            while (this.accumulator >= this.step) {\n                this.update(this.step);\n                this.accumulator -= this.step;\n            }\n            this.render(this.accumulator / this.step);\n            requestAnimationFrame(this.frame.bind(this));\n        }\n    }\n    /**\n     * Init the game\n     */\n    init() {\n        this.emit(\"init\");\n    }\n    /**\n     * Update the game\n     * @param interval [interval in seconds]\n     */\n    update(interval) {\n        this.emit(\"update\", interval);\n    }\n    /**\n     * Render the game\n     * @param delta [delta in seconds]\n     */\n    render(delta) {\n        this.emit(\"render\", delta);\n    }\n}\nexports.GameLoop = GameLoop;\n\n\n//# sourceURL=webpack:///../juno/lib/core/loop.ts?");

/***/ }),

/***/ "../juno/lib/core/polyfills/performance.now.ts":
/*!*****************************************************!*\
  !*** ../juno/lib/core/polyfills/performance.now.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Juno: Performance Now\n *\n * The most basic implementation of getting the elapsed time in milliseconds\n * since time origin (time user has opened the browser window).\n *\n * References:\n * https://developer.mozilla.org/en-US/docs/Web/API/Performance/now (Date: 2018-09-09)\n * https://www.w3schools.com/jsref/jsref_gettime.asp (Date: 2018-09-09)\n * https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now (Date: 2018-09-09)\n *\n * @license      {@link https://github.com/digitsensitive/juno-console/blob/master/license.txt|MIT License}\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElapsedTime = void 0;\nfunction ElapsedTime() {\n    if (window.performance && window.performance.now) {\n        return window.performance.now();\n    }\n    else {\n        return new Date().getTime();\n    }\n}\nexports.ElapsedTime = ElapsedTime;\n\n\n//# sourceURL=webpack:///../juno/lib/core/polyfills/performance.now.ts?");

/***/ }),

/***/ "../juno/lib/core/renderer/canvas/canvas-renderer.ts":
/*!***********************************************************!*\
  !*** ../juno/lib/core/renderer/canvas/canvas-renderer.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 - 2020 Digitsensitive\n * @description  Juno Core: Canvas Renderer\n * @license      {@link https://github.com/digitsensitive/juno-console/blob/master/license.txt|MIT License}\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CanvasRenderer = void 0;\n/**\n * The Canvas Renderer is responsible for drawing everything on the canvas\n * and with that on the screen.\n */\nclass CanvasRenderer {\n    constructor(config) {\n        this.canvas = document.createElement(\"canvas\");\n        document.getElementById(config.name).appendChild(this.canvas);\n        // Canvas settings\n        this.canvas.style.cursor = \"none\";\n        this.width = this.canvas.width = config.width;\n        this.height = this.canvas.height = config.height;\n        this.renderer = this.canvas.getContext(\"2d\");\n        this.renderer.imageSmoothingEnabled = config.antialias;\n        console.log(this.renderer.imageSmoothingEnabled);\n        this.scaleFactor = config.scale || 1;\n        this.renderer.scale(this.scaleFactor, this.scaleFactor);\n        this.canvas.width =\n            config.width * this.scaleFactor || 64 * this.scaleFactor;\n        this.canvas.height =\n            config.height * this.scaleFactor || 64 * this.scaleFactor;\n        if (config.fullscreen) {\n            this.canvas.width = window.innerWidth;\n            this.canvas.height = window.innerHeight;\n        }\n    }\n    getCanvas() {\n        return this.canvas;\n    }\n    getRenderer() {\n        return this.renderer;\n    }\n    getScaleFactor() {\n        return this.scaleFactor;\n    }\n    render(container) {\n        if (!container.isVisible()) {\n            return;\n        }\n        // Render all the children from this container\n        container.getChildren().forEach((child) => {\n            // save the entire state of the canvas by pushing the current state onto a stack\n            this.renderer.save();\n            // render child\n            child.render(this.renderer, this.width, this.height);\n            // restore the most recently saved canvas state by popping the top entry in the drawing state stack\n            this.renderer.restore();\n        });\n    }\n    /**\n     * Set the title of the canvas\n     * @param canvasTitle\n     */\n    setCanvasTitle(canvasTitle) {\n        this.canvas.title = canvasTitle;\n    }\n}\nexports.CanvasRenderer = CanvasRenderer;\n\n\n//# sourceURL=webpack:///../juno/lib/core/renderer/canvas/canvas-renderer.ts?");

/***/ }),

/***/ "../juno/lib/index.ts":
/*!****************************!*\
  !*** ../juno/lib/index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// juno core\n__exportStar(__webpack_require__(/*! ./core/game */ \"../juno/lib/core/game.ts\"), exports);\n// juno polyfills\n__exportStar(__webpack_require__(/*! ./core/polyfills/performance.now */ \"../juno/lib/core/polyfills/performance.now.ts\"), exports);\n// juno interfaces\n__exportStar(__webpack_require__(/*! ./interfaces/game-config.interface */ \"../juno/lib/interfaces/game-config.interface.ts\"), exports);\n\n\n//# sourceURL=webpack:///../juno/lib/index.ts?");

/***/ }),

/***/ "../juno/lib/interfaces/game-config.interface.ts":
/*!*******************************************************!*\
  !*** ../juno/lib/interfaces/game-config.interface.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Juno: Game Config Interface\n * @license      {@link https://github.com/digitsensitive/juno-console/blob/master/license.txt|MIT License}\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\n//# sourceURL=webpack:///../juno/lib/interfaces/game-config.interface.ts?");

/***/ }),

/***/ "../juno/node_modules/eventemitter3/index.js":
/*!***************************************************!*\
  !*** ../juno/node_modules/eventemitter3/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n\n\n//# sourceURL=webpack:///../juno/node_modules/eventemitter3/index.js?");

/***/ }),

/***/ "./src/boilerplate/boilerplate.ts":
/*!****************************************!*\
  !*** ./src/boilerplate/boilerplate.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Boilerplate\n * @license      Digitsensitive\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Game = void 0;\nconst Juno = __webpack_require__(/*! ../../../juno/lib/index */ \"../juno/lib/index.ts\");\nconst config = {\n    name: \"game\",\n    input: { keyboard: true },\n    scale: 8,\n};\nclass Game extends Juno.Game {\n    constructor(config) {\n        super(config);\n        this.startLoop();\n    }\n    init() { }\n    update() { }\n    render() {\n        this.graphics.cls(4);\n    }\n}\nexports.Game = Game;\nwindow.onload = () => {\n    var game = new Game(config);\n};\n\n\n//# sourceURL=webpack:///./src/boilerplate/boilerplate.ts?");

/***/ })

/******/ });